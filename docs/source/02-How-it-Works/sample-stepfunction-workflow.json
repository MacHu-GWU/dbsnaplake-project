{
  "Comment": "A description of my state machine",
  "StartAt": "Step 1 - Check and Setup Prerequisites",
  "States": {
    "Step 1 - Check and Setup Prerequisites": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload": {
          "$.": "$"
        },
        "FunctionName": "arn:aws:lambda:us-east-1:111122223333:function:sfn-poc-lbd-1:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Step 2 - Run DynamoDB Export Job if not Exists",
      "Comment": "1. Check if S3 bucket is setup property\n2. Check if the S3 staging location is empty\n3. Check if the S3 datalake location is empty\n4. Check if the DynamoDB function is ready"
    },
    "Step 2 - Run DynamoDB Export Job if not Exists": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:111122223333:function:sfn-poc-lbd-1:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Get Export Job Status",
      "Comment": "If the DynamoDB export run never executed before, run DynamoDB export."
    },
    "Get Export Job Status": {
      "Comment": "Placeholder for a task state which checks status of the job. Replace with an API action.",
      "Type": "Pass",
      "Result": {
        "status": "SUCCEEDED"
      },
      "Next": "Export Job succeeded?"
    },
    "Wait X Seconds": {
      "Type": "Wait",
      "SecondsPath": "$.wait_time",
      "Next": "Get Export Job Status"
    },
    "Export Job succeeded?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.status",
          "StringEquals": "FAILED",
          "Next": "Fail"
        },
        {
          "Variable": "$.status",
          "StringEquals": "SUCCEEDED",
          "Next": "Step 3 - Run ETL Job Planner"
        }
      ],
      "Default": "Wait X Seconds"
    },
    "Step 3 - Run ETL Job Planner": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:111122223333:function:sfn-poc-lbd-1:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Step 4 - Generate Many DB Snapshot File Group Manifest and dispatch to Workers",
      "Comment": "Analyze the DynamoDB export data and determine the optimal batch size for each concurrent worker. Also, generate the DB Snapshot File Manifest File."
    },
    "Step 4 - Generate Many DB Snapshot File Group Manifest and dispatch to Workers": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:111122223333:function:sfn-poc-lbd-1:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Dispatch DB Snapshot File Group Manifest to Workers"
    },
    "Dispatch DB Snapshot File Group Manifest to Workers": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Step 5 - Process DB Snapshot File Group Manifest",
        "States": {
          "Step 5 - Process DB Snapshot File Group Manifest": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "arn:aws:lambda:us-east-1:111122223333:function:sfn-poc-lbd-1:$LATEST"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "Label": "DispatchDBSnapshotFileGroupManifesttoWorkers",
      "MaxConcurrency": 1000,
      "Next": "Step 6 - Generate Partition File Group Manifest and Dispatch to Workers",
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:getObject",
        "ReaderConfig": {
          "InputType": "JSON"
        },
        "Parameters": {
          "Bucket": "bucket",
          "Key": "file.json"
        }
      }
    },
    "Step 6 - Generate Partition File Group Manifest and Dispatch to Workers": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:111122223333:function:sfn-poc-lbd-1:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Dispatch Partition File Group Manifest to Workers"
    },
    "Dispatch Partition File Group Manifest to Workers": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Step 7 - Process Partition File Group Manifest",
        "States": {
          "Step 7 - Process Partition File Group Manifest": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "arn:aws:lambda:us-east-1:111122223333:function:sfn-poc-lbd-1:$LATEST"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "Next": "Step 8 - Validate Results",
      "Label": "DispatchPartitionFileGroupManifesttoWorkers",
      "MaxConcurrency": 1000,
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:getObject",
        "ReaderConfig": {
          "InputType": "JSON"
        },
        "Parameters": {
          "Bucket": "bucket",
          "Key": "file.json"
        }
      }
    },
    "Step 8 - Validate Results": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:111122223333:function:sfn-poc-lbd-1:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}